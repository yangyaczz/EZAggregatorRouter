const { BigNumber, Signer } = require("ethers");
const { ethers } = require("hardhat");

const nft721ABI = require("./abis/ERC721.json");
const nft1155ABI = require("./abis/ERC1155.json");
const wethABI = require("./abis/WETH.json")

const seaportABI = require("./abis/Seaport.json")

describe("aggregator matic buy erc20 nft test", function () {
    let alice;
    let nft;
    let sr;
    let weth


    let blocknumber = 38861329
    let mockAddress = "0xc71c590eF9a4f4ebc5DF1c6A555dEeD3F8E721f5";  //  whale
    let nftAddress = "0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d"  // lens
    // let tokenid = 7
    // let nftTokenId = "0x5d9cc2b3aefdbe8ec0f69361248e27bfb6c06202:6"

    let wethAddress = '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'
    let seaportAddress = "0x00000000006c3852cbEf3e08E8dF289169EdE581"
    let usdcAddress = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174'


    let apiData = {
        "id": "0x0e803337237b28e3550c312c8b5e46866aa264b243dd4d74eefa9e966812b58e",
        "kind": "seaport",
        "side": "sell",
        "status": "active",
        "tokenSetId": "token:0xdb46d1dc155634fbc732f92e853b10b288ad5a1d:60119",
        "tokenSetSchemaHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "contract": "0xdb46d1dc155634fbc732f92e853b10b288ad5a1d",
        "maker": "0xa0edbfc449fb674dd4e8b722546005d4ff29a781",
        "taker": "0x0000000000000000000000000000000000000000",
        "price": {
            "currency": {
                "contract": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
                "name": "USD Coin (PoS)",
                "symbol": "USDC",
                "decimals": 6
            },
            "amount": {
                "raw": "130000000",
                "decimal": 130,
                "usd": 130.29302,
                "native": 109.71683
            },
            "netAmount": {
                "raw": "126750000",
                "decimal": 126.75,
                "usd": 127.03569,
                "native": 106.97391
            }
        },
        "validFrom": 1675428412,
        "validUntil": 1676744120,
        "quantityFilled": 0,
        "quantityRemaining": 1,
        "criteria": {
            "kind": "token",
            "data": {
                "token": {
                    "tokenId": "60119"
                }
            }
        },
        "source": {
            "id": "0x5b3256965e7c3cf26e11fcaf296dfc8807c01073",
            "domain": "opensea.io",
            "name": "OpenSea",
            "icon": "https://raw.githubusercontent.com/reservoirprotocol/indexer/v5/src/models/sources/opensea-logo.svg"
        },
        "feeBps": 250,
        "feeBreakdown": [
            {
                "bps": 250,
                "kind": "marketplace",
                "recipient": "0x0000a26b00c1f0df003000390027140000faa719"
            }
        ],
        "expiration": 1676744120,
        "isReservoir": null,
        "isDynamic": false,
        "createdAt": "2023-02-03T12:47:06.834Z",
        "updatedAt": "2023-02-03T12:47:06.834Z",
        "rawData": {
            "kind": "single-token",
            "salt": "0x360c6ebe0000000000000000000000000000000000000000a27b09ccabb047c6",
            "zone": "0x0000000000000000000000000000000000000000",
            "offer": [
                {
                    "token": "0xdb46d1dc155634fbc732f92e853b10b288ad5a1d",
                    "itemType": 2,
                    "endAmount": "1",
                    "startAmount": "1",
                    "identifierOrCriteria": "60119"
                }
            ],
            "counter": "0",
            "endTime": 1676744120,
            "offerer": "0xa0edbfc449fb674dd4e8b722546005d4ff29a781",
            "zoneHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "orderType": 0,
            "signature": "0x23677cd6bf19aee4def160e835ca6e32d41a227fa58eff7b784a1f457d0512d447df63f4efd53ebcdffe6fa051dd47a544d6c8c26de79b994d8c48515395190c1c",
            "startTime": 1675428412,
            "conduitKey": "0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000",
            "consideration": [
                {
                    "token": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
                    "itemType": 1,
                    "endAmount": "126750000",
                    "recipient": "0xa0edbfc449fb674dd4e8b722546005d4ff29a781",
                    "startAmount": "126750000",
                    "identifierOrCriteria": "0"
                },
                {
                    "token": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
                    "itemType": 1,
                    "endAmount": "3250000",
                    "recipient": "0x0000a26b00c1f0df003000390027140000faa719",
                    "startAmount": "3250000",
                    "identifierOrCriteria": "0"
                }
            ]
        }
    }

    beforeEach(async () => {

        // await network.provider.request({
        //     method: "hardhat_reset",
        //     params: [
        //         {
        //             chainId: 137,
        //             forking: {
        //                 // jsonRpcUrl: "https://polygon-mainnet.g.alchemy.com/v2/VKUc1_zI9zmEaXNsiDNY0KynQE6rKMsp",
        //                 jsonRpcUrl: "https://rpc.ankr.com/polygon",
        //                 blockNumber: blocknumber,
        //             },
        //         },
        //     ],
        // });


        await network.provider.request({
            method: "hardhat_impersonateAccount",
            params: [mockAddress],
        });
        alice = await ethers.provider.getSigner(mockAddress);

        nft = new ethers.Contract(nftAddress, nft721ABI, alice);

        weth = new ethers.Contract(wethAddress, wethABI, alice)
        usdc = new ethers.Contract(usdcAddress, wethABI, alice)
        seaport = new ethers.Contract(seaportAddress, seaportABI, alice)



        // const paramsConstractorMatic = {
        //     weth9: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",  // wmatic
        //     reservoir: "0x819327e005A3ed85F7b634e195b8F25D4a2a45f8",  // ReservoirV6_0_0 matic
        //     seaportModule: "0xb75Dfff7dA2A0c8E6Bb235b80d28f997152D06FC", // SeaportModule 
        //     ezswap: "0x6D7fBa7979334fC173a42eA8FEF31698318a845A", // ezswaprouter matic
        //     seaport: "0x00000000006c3852cbEf3e08E8dF289169EdE581"  // seaport
        // };

        // sr = await (
        //     await ethers.getContractFactory("EZAggregatorV1RouterUpgradeMatic")
        // ).deploy(paramsConstractorMatic);



        // const SR = await ethers.getContractFactory("EZAggregatorV1Router")
        // sr = await SR.attach("0x0B1877395d5b4F93A677cB13544b0061Ee45e8A3")

        //////////////////////
    });

    it("reservior ERC20 buy", async () => {

        // console.log(sr.address)
        console.log(await ethers.provider.getBlockNumber())

        // console.log(
        //     "taker address is:",
        //     alice._address,
        //     "relayer address is:",
        //     sr.address
        // );

        // console.log(
        //     "before execute taker nft balance:",
        //     await nft.balanceOf(alice._address, tokenid),
        //     "before execute relayer nft balance:",
        //     await nft.balanceOf(sr.address, tokenid)
        // );

        // console.log(await weth.balanceOf(alice._address))
        // console.log(await ethers.provider.getBalance(alice._address))

        await usdc.approve(seaport.address, ethers.constants.MaxUint256)



        // await alice.sendTransaction({
        //     to: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',
        //     data: '0x095ea7b300000000000000000000000000000000006c3852cbef3e08e8df289169ede581ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
        // })

        await alice.sendTransaction({
            to: "0x00000000006c3852cbef3e08e8df289169ede581",
            data: "0xfb0f3ee100000000000000000000000000000000000000000000000000000000000000200000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078e0d30000000000000000000000000a0edbfc449fb674dd4e8b722546005d4ff29a7810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db46d1dc155634fbc732f92e853b10b288ad5a1d000000000000000000000000000000000000000000000000000000000000ead7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000063dd023c0000000000000000000000000000000000000000000000000000000063f115b80000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000a27b09ccabb047c60000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000003197500000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000004123677cd6bf19aee4def160e835ca6e32d41a227fa58eff7b784a1f457d0512d447df63f4efd53ebcdffe6fa051dd47a544d6c8c26de79b994d8c48515395190c1c00000000000000000000000000000000000000000000000000000000000000"
        })

        // let gas = await ethers.provider.estimateGas({
        //     from: alice._address,
        //     to: "0x00000000006c3852cbef3e08e8df289169ede581",
        //     data: "0xfb0f3ee100000000000000000000000000000000000000000000000000000000000000200000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000078e0d30000000000000000000000000a0edbfc449fb674dd4e8b722546005d4ff29a7810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db46d1dc155634fbc732f92e853b10b288ad5a1d000000000000000000000000000000000000000000000000000000000000ead7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000063dd023c0000000000000000000000000000000000000000000000000000000063f115b80000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000a27b09ccabb047c60000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000003197500000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000004123677cd6bf19aee4def160e835ca6e32d41a227fa58eff7b784a1f457d0512d447df63f4efd53ebcdffe6fa051dd47a544d6c8c26de79b994d8c48515395190c1c00000000000000000000000000000000000000000000000000000000000000",
        // });

        // console.log(gas)


        // get additonalRecipients
        let additonalRecipients = []
        for (let i = 1; i < apiData.rawData.consideration.length; i++) {
            let aR = [
                apiData.rawData.consideration[i].endAmount,
                apiData.rawData.consideration[i].recipient
            ]
            additonalRecipients.push(aR)
        }


        // sort params from api
        let orderParams = [
            apiData.rawData.consideration[0].token,
            apiData.rawData.consideration[0].identifierOrCriteria,
            apiData.rawData.consideration[0].endAmount,
            apiData.rawData.offerer,
            apiData.rawData.zone,
            apiData.rawData.offer[0].token,
            apiData.rawData.offer[0].identifierOrCriteria,
            apiData.rawData.offer[0].endAmount,
            apiData.rawData.orderType,
            apiData.rawData.startTime,
            apiData.rawData.endTime,
            apiData.rawData.zoneHash,
            BigInt(apiData.rawData.salt).toString(),   // apiData.rawData.salt
            apiData.rawData.conduitKey,
            apiData.rawData.conduitKey,
            apiData.rawData.consideration.length - 1,
            additonalRecipients,
            apiData.rawData.signature
        ]

        // send tx
        // let tx = await seaport.fulfillBasicOrder(orderParams)

        console.log(await nft.balanceOf(alice._address))




        //////
        // opensea
        // let dataApi = {
        //     "from": "0x0b1877395d5b4f93a677cb13544b0061ee45e8a3",
        //     "to": "0x819327e005a3ed85f7b634e195b8f25d4a2a45f8",
        //     "data": "0x760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e225afd0b78a265a60ccaeb1c1310e0016716e7b0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000006a94d74f43000000000000000000000000000000000000000000000000000000000000000006a476af662900000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e3a463d743f762d538031bad3f1e748bb41f96ec000000000000000000000000e3a463d743f762d538031bad3f1e748bb41f96ec0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000063000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000bbb155379ae1de8fdd82a73aa1dab8cc6502dd4600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000063c68a9c0000000000000000000000000000000000000000000000000000000063ef691c0000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000ecc8e3a76ec425620000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000048c75fbf0452fa8ff2928ddf46b0fe7629cca2ffd5b320be00000000000000000000000000000000000000000000000000024109d5b320be000000000000000000000000000bbb155379ae1de8fdd82a73aa1dab8cc6502dd460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000107c9fb4a92a0000000000000000000000000000000000000000000000000000107c9fb4a92a0000000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041f27ed2a4a8000000000000000000000000000000000000000000000000000041f27ed2a4a8000000000000000000000000000fde55ee5b8c137fd3a0e5d55b6fff58995bb4636000000000000000000000000000000000000000000000000000000000000004147287ec930ea64e8ab3c186835fc53843f5d65e9b78b9a29858b2c8e884611e622502b83f98d4ad66a0d427e76c916212cf5d2ea2232f927fd243f62671101171c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        //     "value": "0x6a94d74f430000"
        //   }

        // let input;

        // if (dataApi.to == "0x819327e005a3ed85f7b634e195b8f25d4a2a45f8") {
        //     input = ethers.utils.defaultAbiCoder.encode(
        //         ["uint256", "bytes"],
        //         [dataApi.value, dataApi.data]
        //     );
        // } else {
        //     console.log("offerMarketId error");
        //     return;
        // }

        // await sr['execute(bytes,bytes[],uint256)']('0x10', [input], 2000000000, { value: dataApi.value });

        // console.log(
        //     "after execute taker nft balance:",
        //     await nft.balanceOf(alice._address, tokenid),
        //     "after execute relayer nft balance:",
        //     await nft.balanceOf(sr.address, tokenid)
        // );
    });
});
