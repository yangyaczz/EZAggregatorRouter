const { BigNumber, Signer } = require("ethers");
const { ethers } = require("hardhat");

const nftABI = require("./abis/ERC721.json");
const wethABI = require("./abis/WETH.json");


describe("aggregator buy nft test", function () {
  let alice;
  let nft;
  let sr;

  beforeEach(async () => {
    const mockAddress = "0x9fA110fd43739Cb6e1d3Ca0Fa120A7d04cba5257";
    await network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [mockAddress],
    });

    alice = await ethers.provider.getSigner(mockAddress);

    const nftAddress = "0xED5AF388653567Af2F388E6224dC7C4b3241C544";
    nft = new ethers.Contract(nftAddress, nftABI, alice);

    const wethAddress = "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2";
    weth = new ethers.Contract(wethAddress, wethABI, alice);

    const paramsConstractorMainnet = {
      weth9: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      reservoir: "0x178A86D36D89c7FDeBeA90b739605da7B131ff6A",
      seaportModule: "0x3729014ef28f01B3ddCF7f980D925E0B71b1F847",
      looksRareModule: "0x385df8CBC196f5f780367F3cDC96aF072a916F7E",
      x2y2Module: "0x613D3c588F6B8f89302b463F8F19f7241B2857E2",
      sudoswap: "0x2B2e8cDA09bBA9660dCA5cB6233787738Ad68329",
      ezswap: "0xa63eC144d070a1BF19a7577C88c580E7de92E0fc",
    };

    sr = await (
      await ethers.getContractFactory("EZAggregatorV1Router")
    ).deploy(paramsConstractorMainnet);

    //////////////////////
  });

  it("sell nft through simpleRouter", async () => {
    console.log(
      "taker address is:",
      alice._address,
      "relayer address is:",
      sr.address
    );

    console.log(
      "before execute taker nft balance:",
      await nft.balanceOf(alice._address),
      "before execute relayer nft balance:",
      await nft.balanceOf(sr.address)
    );
    /////

    const dataApi =
      "0xb88d4fde000000000000000000000000b7ca895f81f20e05a5eb11b05cbaab3dae5e23cd0000000000000000000000003729014ef28f01b3ddcf7f980d925e0b71b1f8470000000000000000000000000000000000000000000000000000000000001f16000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000009c4760f2a0b0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000003729014ef28f01b3ddcf7f980d925e0b71b1f8470000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008c46baab5f700000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000680000000000000000000000000b7ca895f81f20e05a5eb11b05cbaab3dae5e23cd000000000000000000000000b7ca895f81f20e05a5eb11b05cbaab3dae5e23cd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000008a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a00000000000000000000000008eb964e215b4c7dc4e546021bad33ff9d2b7ceb0000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000063a2cd6b0000000000000000000000000000000000000000000000000000000063a2d4530000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000cb9e0f36ce085c6c0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7f67e60248d8000000000000000000000000000000000000000000000000000a7f67e60248d800000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000ed5af388653567af2f388e6224dc7c4b3241c544d86a42b61396422f01451637dc2243c4dabfb7e901b621b01a510ec901d64f28000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000008eb964e215b4c7dc4e546021bad33ff9d2b7ceb00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000432f65c00e9f0000000000000000000000000000000000000000000000000000432f65c00e9f0000000000000000000000000000000a26b00c1f0df003000390027140000faa7190000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000865ecb801d3e0000000000000000000000000000000000000000000000000000865ecb801d3e000000000000000000000000000b4d24dacbdffa1bbf9a624044484b3feeb7fdf7400000000000000000000000000000000000000000000000000000000000000411557bb106c6849dbfccf0d92d3e4255ace6b2f274f10238ca8169d9285c978324c61f966c736b9d12e95e89fb1f150a9db7c3bd28c2ca58fe1d7c27364914e8e1cf1600000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009cef5b756b32a9abb6aeaeb65c06754fcc05691e8913ed5f6543016b9173fb3eeeabe4d3a973f222bd2028a1b69c8808c79db1803432004842b09cc38e12ab1e5937c5bc3a61564fe42f7023423a936d7e5be76e9147e3d345392febef4eb9c09a2553a4ae653dfcde0d287ef841e32f699c69c142109e44be131a0563a32468c8b45ca2b093e61e3d99c54cc1dde7a8f73e29e51b0ba1533dbd7689efbf9e3f2621f8a740f07c7bd324b6150f3a13d9a9419cd8d6ba4913d97870a436ecb635afdcab6b5167b520d80550db3a4212cb84b111a15b11e01bcf00df3b9b62276c847fcf5a48f13609f6040675f57f30ab2aae53fde285f3a88efad16ff965625735a0980fcc307515838c91856b25a5b053de97656b11666325a667f492d159d1600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    const decode = hre.ethers.utils.defaultAbiCoder.decode(
      ["address", "address", "uint256", "bytes"],
      ethers.utils.hexDataSlice(dataApi, 4)
    );

    let offerMarketId;
    if (decode[1] == "0x3729014ef28f01B3ddCF7f980D925E0B71b1F847") {
      offerMarketId = 0;
    } else if (decode[1] == "0x385df8CBC196f5f780367F3cDC96aF072a916F7E") {
      offerMarketId = 1;
    } else if (decode[1] == "0x613D3c588F6B8f89302b463F8F19f7241B2857E2") {
      offerMarketId = 2;
    } else {
      return;
    }

    let ReservoirOffers = [];

    const ReservoirOffer1 = {
      offerMarket: offerMarketId,
      tokenStandard: 721, // erc721 is fixed
      collection: "0xED5AF388653567Af2F388E6224dC7C4b3241C544", // api
      tokenId: decode[2],
      tokenAmount: 1, // erc721 is fixed
      inputDate: decode[3],
      offerAmount: "11195275000000000000", // api
    };

    ReservoirOffers.push(ReservoirOffer1);

    let input = ethers.utils.defaultAbiCoder.encode(
      [
        "(uint8 offerMarket, uint256 tokenStandard, address collection,uint256 tokenId, uint256 tokenAmount, bytes inputDate, uint256 offerAmount)[]",
      ],
      [ReservoirOffers]
    );

    await nft.setApprovalForAll(sr.address, true);

    await sr.connect(alice)["execute(bytes,bytes[],uint256)"]("0x01", [input], 2000000000);

    console.log(
      "after execute taker nft balance:",
      await nft.balanceOf(alice._address),
      "after execute relayer nft balance:",
      await nft.balanceOf(sr.address),
      "after execute relayer weth balance:",
      await weth.balanceOf(sr.address),
    );
  });
});
