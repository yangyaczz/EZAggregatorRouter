const { BigNumber, Signer } = require("ethers");
const { ethers } = require("hardhat");

const nftABI = require("./abis/ERC721.json");
const wethABI = require("./abis/WETH.json");

describe("aggregator buy nft test", function () {
  let alice;
  let nft;
  let sr;

  beforeEach(async () => {
    const mockAddress = "0xae2b5589a42e644f78b7aac2a8d5566b31c05084";
    await network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [mockAddress],
    });

    alice = await ethers.provider.getSigner(mockAddress);

    const nftAddress = "0x70a3fd679762eafd655d293cb8b4a76c11a4da4a";
    nft = new ethers.Contract(nftAddress, nftABI, alice);

    const wethAddress = "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6";
    weth = new ethers.Contract(wethAddress, wethABI, alice);

    const paramsConstractorGoerli = {
      weth9: "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6", //
      reservoir: "0xb35D22a4553Ab9d2b85e2A606CBAe55F844DF50c", //
      seaportModule: "0x6C460f133c573C21e7f55900D0C68F6F085B91e7",
      looksRareModule: "0x532486Bb46581b032134159C1D31962cdab1E6a7",
      x2y2Module: "0x6A789513b2E555f9d3539bf9A053A57D2BFCa426",
      sudoswap: "0x25b4EfC43c9dCAe134233CD577fFca7CfAd6748F", //
      ezswap: "0x826868A09FECAb872E8E95bc02ff040223C950FE", //
    };

    sr = await (
      await ethers.getContractFactory("EZAggregatorV1Router")
    ).deploy(paramsConstractorGoerli);

    //////////////////////
  });

  it("sell nft through simpleRouter", async () => {
    console.log(
      "taker address is:",
      alice._address,
      "relayer address is:",
      sr.address
    );

    console.log(
      "before execute taker nft balance:",
      await nft.balanceOf(alice._address),
      "before execute relayer nft balance:",
      await nft.balanceOf(sr.address)
    );

    ///// 1. get from reservior api
    const pathApi = {
      orderId:
        "0x076cf8c56dd21e1a94d271ca3bd42c4f603c9a2837637b76acf35c52de735e39",
      contract: "0x70a3fd679762eafd655d293cb8b4a76c11a4da4a",
      tokenId: "36",
      quantity: 1,
      source: "looksrare.org",
      currency: "0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",
      quote: 0.02955,
      rawQuote: "29550000000000000",
    };
    const dataApi = {
      from: "0xdad5a164a3049a443ed1530b70390ed7663aad1f",
      to: "0x70a3fd679762eafd655d293cb8b4a76c11a4da4a",
      data: "0xb88d4fde000000000000000000000000dad5a164a3049a443ed1530b70390ed7663aad1f000000000000000000000000532486bb46581b032134159c1d31962cdab1e6a70000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004e4760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000532486bb46581b032134159c1d31962cdab1e6a70000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e4267bf79700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000dad5a164a3049a443ed1530b70390ed7663aad1f000000000000000000000000dad5a164a3049a443ed1530b70390ed7663aad1f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000532486bb46581b032134159c1d31962cdab1e6a7000000000000000000000000000000000000000000000000006a94d74f4300000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000264800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeb6c7b10f2c0d259d21eb9cc5d37664bb12360200000000000000000000000070a3fd679762eafd655d293cb8b4a76c11a4da4a000000000000000000000000000000000000000000000000006a94d74f43000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000afb81825dc076500bf19cbf69d443684f2ebd3f6000000000000000000000000b4fbf271143f4fbf7b91a5ded31805e42b2208d600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063adae360000000000000000000000000000000000000000000000000000000063d53b2a00000000000000000000000000000000000000000000000000000000000026480000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001b66e34e757e33561adaab62ca83d3ec644ab195206b50f21fb4632720f0af647b58ed92a8951abbdc82fc99439a59325c625a5aeac3b230a1878c86a3df76fca7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    };

    // 2. handle data
    const decode = hre.ethers.utils.defaultAbiCoder.decode(
      ["address", "address", "uint256", "bytes"],
      ethers.utils.hexDataSlice(dataApi.data, 4)
    );

    let offerMarketId;
    if (decode[1] == "0x6C460f133c573C21e7f55900D0C68F6F085B91e7") {
      offerMarketId = 0;
    } else if (decode[1] == "0x532486Bb46581b032134159C1D31962cdab1E6a7") {
      offerMarketId = 1;
    } else if (decode[1] == "0x6A789513b2E555f9d3539bf9A053A57D2BFCa426") {
      offerMarketId = 2;
    } else {
      return;
    }

    let ReservoirOffers = [];

    const ReservoirOffer1 = {
      offerMarket: offerMarketId,
      tokenStandard: 721, // erc721 is fixed
      collection: pathApi.contract,
      tokenId: pathApi.tokenId,
      tokenAmount: 1, // erc721 is fixed
      inputDate: decode[3],
      offerAmount: pathApi.rawQuote,
    };

    ReservoirOffers.push(ReservoirOffer1);

    let input = ethers.utils.defaultAbiCoder.encode(
      [
        "(uint8 offerMarket, uint256 tokenStandard, address collection,uint256 tokenId, uint256 tokenAmount, bytes inputDate, uint256 offerAmount)[]",
      ],
      [ReservoirOffers]
    );

    // 3. interact with contract
    await nft.setApprovalForAll(sr.address, true);

    await sr
      .connect(alice)
      ["execute(bytes,bytes[],uint256)"]("0x01", [input], 2000000000);

    // 4. cheak the result
    console.log(
      "after execute taker nft balance:",
      await nft.balanceOf(alice._address),
      "after execute relayer nft balance:",
      await nft.balanceOf(sr.address),
      "after execute relayer weth balance:",
      await weth.balanceOf(sr.address)
    );
  });
});
